@using Aiwins.Rocket.AspNetCore.Mvc.AntiForgery
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Components.LayoutHook
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Layout
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Theme.Basic.Bundling
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.MainNavbar
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Theme.Basic.Themes.Basic.Components.PageAlerts
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Theme.Shared.Components
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Theming
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Aiwins.Rocket.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@inject IRocketAntiForgeryManager RocketAntiForgeryManager
@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@{
    Layout = null;
    RocketAntiForgeryManager.SetCookie();
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Application)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <title>@pageTitle</title>

    <rocket-style-bundle name="@BasicThemeBundles.Styles.Global" />

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Application)
</head>
<body class="rocket-application-layout bg-light">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Application)

    @(await Component.InvokeAsync<MainNavbarViewComponent>())

    <div class="@containerClass">
        @(await Component.InvokeAsync<PageAlertsViewComponent>())
        <div id="RocketContentToolbar">
            <div class="text-right mb-2">
                @RenderSection("content_toolbar", false)
            </div>
        </div>
        @RenderBody()
    </div>

    <rocket-script-bundle name="@BasicThemeBundles.Scripts.Global" />

    <script src="~/rocket/application-configuration-script"></script>
    <script src="~/rocket/service-proxy-script"></script>

    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

    @await RenderSectionAsync("scripts", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Application)
</body>
</html>